name: CI/CD Pipeline for FastAPI Service

on:
  push:
    branches:
      - main
    paths:
      - '**/*.py'
      - 'requirements.txt'
      - 'Dockerfile' # Ajout√© pour d√©clencher le build Docker si la recette change
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
    paths:
      - '**/*.py'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.github/workflows/**'

jobs:
  # -----------------------------------------------------------
  # JOB 1: Continuous Integration (CI) - Tests et qualit√© du code
  # -----------------------------------------------------------
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          # AVERTISSEMENT : Utilisez une version support√©e par l'environnement local et CI. 
          # 3.11 est souvent plus stable sur les runners.
          python-version: "3.13" 

      - name: ‚öôÔ∏è Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Installation des d√©pendances √† partir du fichier requirements.txt propre
          pip install -r requirements.txt

      - name: üß™ Run tests
        run: |
          # Correction du ModuleNotFoundError : Ajoutez le r√©pertoire courant au chemin Python.
          PYTHONPATH=. pytest tests/


  # -----------------------------------------------------------
  # JOB 2: Continuous Deployment (CD) - Build et Push Docker
  # -----------------------------------------------------------
  build_and_push_docker:
    needs: test # Ne s'ex√©cute QUE si le job 'test' a r√©ussi (CD = CI S√õRE)
    runs-on: ubuntu-latest
    
    # Permissions n√©cessaires pour publier l'image conteneur sur GHCR
    permissions:
      contents: read
      packages: write 
      
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üîê Log in to GitHub Container Registry (GHCR)
        # N√©cessaire pour l'√©tape de 'push'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Votre nom d'utilisateur GitHub
          password: ${{ secrets.GITHUB_TOKEN }} # Token g√©n√©r√© automatiquement

      - name: üè∑Ô∏è D√©finir les Tags de l'Image Docker
        # Taguer l'image avec le SHA court du commit (pour la tra√ßabilit√©)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} 
          tags: |
            type=sha,prefix=,suffix=,format=short

      - name: üõ†Ô∏è Build and Push Docker image
        # Utilise la recette du Dockerfile et la pousse au registre
        uses: docker/build-push-action@v5
        with:
          context: . 
          push: true
          tags: ${{ steps.meta.outputs.tags }}